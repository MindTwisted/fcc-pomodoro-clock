{"version":3,"sources":["assets/BeepSound.wav","utils/EventBus.ts","hooks/usePomodoroClockState.ts","types/actionTypes.ts","components/MinutesPicker.tsx","components/ClockCountdown.tsx","components/AlarmSound.tsx","components/PomodoroClock.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","EventBus","callbacks","on","event","callback","this","callbackId","uniqid","emit","Object","values","forEach","pomodoroClockInitialState","settings","breakLength","sessionLength","currentIntervalSettings","name","initialTime","defaultSessionLength","timeLeft","isRunning","pomodoroClockReducer","produce","draft","action","type","nextLength","nextTimeLeft","nextIntervalName","nextTime","timerId","MinutesPicker","minutes","decrementButtonId","minutesViewerId","incrementButtonId","isActive","incrementMinutes","decrementMinutes","className","id","onClick","disabled","ClockCountdown","intervalName","appendZero","value","String","length","style","top","time","seconds","formatTime","AlarmSound","audioEl","useRef","play","currentAudioEl","current","stop","pause","currentTime","useEffect","removeStartAlarmListener","removeStopAlarmListener","ref","src","BeepSound","PomodoroClock","initialState","useReducer","state","dispatch","window","setInterval","clearInterval","incrementBreakLength","decrementBreakLength","incrementSessionLength","decrementSessionLength","startClock","stopClock","resetClock","stopAlarm","actions","usePomodoroClockState","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fc477adc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BeepSound.988833bf.wav\";","import uniqid from 'uniqid'\r\n\r\nconst EventBus: {\r\n  callbacks: any,\r\n  on: Function,\r\n  emit: Function\r\n} = {\r\n  callbacks: {},\r\n  on (event: string, callback: Function): Function {\r\n    if (!this.callbacks[event]) {\r\n      this.callbacks[event] = {}\r\n    }\r\n\r\n    const callbackId = uniqid()\r\n\r\n    this.callbacks[event][callbackId] = callback\r\n\r\n    return () => {\r\n      delete this.callbacks[event][callbackId]\r\n    }\r\n  },\r\n  emit (event: string) {\r\n    if (!this.callbacks[event]) {\r\n      return\r\n    }\r\n\r\n    Object.values(this.callbacks[event]).forEach((callback: any) => {\r\n      callback()\r\n    })\r\n  }\r\n}\r\n\r\nexport default EventBus\r\n","import { useEffect, useReducer } from 'react'\r\nimport produce from 'immer'\r\nimport { PomodoroClockActions } from '../types/actions'\r\nimport {\r\n  CLOCK_TICK,\r\n  DECREMENT_BREAK_LENGTH,\r\n  DECREMENT_SESSION_LENGTH,\r\n  INCREMENT_BREAK_LENGTH,\r\n  INCREMENT_SESSION_LENGTH,\r\n  RESET_CLOCK,\r\n  START_CLOCK,\r\n  STOP_ALARM,\r\n  STOP_CLOCK\r\n} from '../types/actionTypes'\r\nimport EventBus from '../utils/EventBus'\r\n\r\ntype PomodoroClockState = {\r\n  settings: {\r\n    breakLength: number\r\n    sessionLength: number\r\n  }\r\n  currentIntervalSettings: {\r\n    name: 'Session' | 'Break'\r\n    initialTime: number\r\n    timeLeft: number\r\n    isRunning: boolean\r\n  }\r\n}\r\n\r\nconst defaultBreakLength = 5\r\nconst defaultSessionLength = 25\r\nconst pomodoroClockInitialState: PomodoroClockState = {\r\n  settings: {\r\n    breakLength: defaultBreakLength,\r\n    sessionLength: defaultSessionLength\r\n  },\r\n  currentIntervalSettings: {\r\n    name: 'Session',\r\n    initialTime: defaultSessionLength * 60,\r\n    timeLeft: defaultSessionLength * 60,\r\n    isRunning: false\r\n  }\r\n}\r\n\r\nconst pomodoroClockReducer = produce((draft: PomodoroClockState, action: PomodoroClockActions) => {\r\n  switch (action.type) {\r\n    case INCREMENT_BREAK_LENGTH:\r\n      {\r\n        const nextLength = draft.settings.breakLength + 1 > 60 ? 60 : draft.settings.breakLength + 1\r\n\r\n        draft.settings.breakLength = nextLength\r\n\r\n        if (draft.currentIntervalSettings.name === 'Break') {\r\n          draft.currentIntervalSettings.initialTime = nextLength * 60\r\n          draft.currentIntervalSettings.timeLeft = nextLength * 60\r\n        }\r\n      }\r\n\r\n      break\r\n    case DECREMENT_BREAK_LENGTH:\r\n      {\r\n        const nextLength = draft.settings.breakLength - 1 < 1 ? 1 : draft.settings.breakLength - 1\r\n\r\n        draft.settings.breakLength = nextLength\r\n\r\n        if (draft.currentIntervalSettings.name === 'Break') {\r\n          draft.currentIntervalSettings.initialTime = nextLength * 60\r\n          draft.currentIntervalSettings.timeLeft = nextLength * 60\r\n        }\r\n      }\r\n\r\n      break\r\n    case INCREMENT_SESSION_LENGTH:\r\n      {\r\n        const nextLength = draft.settings.sessionLength + 1 > 60 ? 60 : draft.settings.sessionLength + 1\r\n\r\n        draft.settings.sessionLength = nextLength\r\n\r\n        if (draft.currentIntervalSettings.name === 'Session') {\r\n          draft.currentIntervalSettings.initialTime = nextLength * 60\r\n          draft.currentIntervalSettings.timeLeft = nextLength * 60\r\n        }\r\n      }\r\n\r\n      break\r\n    case DECREMENT_SESSION_LENGTH:\r\n      {\r\n        const nextLength = draft.settings.sessionLength - 1 < 1 ? 1 : draft.settings.sessionLength - 1\r\n\r\n        draft.settings.sessionLength = nextLength\r\n\r\n        if (draft.currentIntervalSettings.name === 'Session') {\r\n          draft.currentIntervalSettings.initialTime = nextLength * 60\r\n          draft.currentIntervalSettings.timeLeft = nextLength * 60\r\n        }\r\n      }\r\n\r\n      break\r\n    case START_CLOCK:\r\n      draft.currentIntervalSettings.isRunning = true\r\n\r\n      break\r\n\r\n    case STOP_CLOCK:\r\n      draft.currentIntervalSettings.isRunning = false\r\n\r\n      break\r\n    case RESET_CLOCK:\r\n      EventBus.emit('stopAlarm')\r\n\r\n      return { ...pomodoroClockInitialState }\r\n    case CLOCK_TICK:\r\n      {\r\n        const nextTimeLeft = draft.currentIntervalSettings.timeLeft - 1\r\n\r\n        if (nextTimeLeft >= 0) {\r\n          draft.currentIntervalSettings.timeLeft = nextTimeLeft\r\n\r\n          break\r\n        }\r\n\r\n        const nextIntervalName = draft.currentIntervalSettings.name === 'Session' ? 'Break' : 'Session'\r\n        const nextTime = nextIntervalName === 'Session' ? draft.settings.sessionLength * 60 : draft.settings.breakLength * 60\r\n\r\n        draft.currentIntervalSettings.name = nextIntervalName\r\n        draft.currentIntervalSettings.initialTime = nextTime\r\n        draft.currentIntervalSettings.timeLeft = nextTime\r\n\r\n        EventBus.emit('startAlarm')\r\n      }\r\n\r\n      break\r\n    case STOP_ALARM:\r\n      EventBus.emit('stopAlarm')\r\n\r\n      break\r\n  }\r\n})\r\n\r\nlet timerId: number | null = null\r\n\r\nexport default function usePomodoroClockState (initialState: PomodoroClockState = pomodoroClockInitialState) {\r\n  const [state, dispatch] = useReducer(pomodoroClockReducer, initialState)\r\n  const isRunning = state.currentIntervalSettings.isRunning\r\n\r\n  useEffect(() => {\r\n    if (isRunning) {\r\n      timerId = window.setInterval(() => {\r\n        dispatch({\r\n          type: CLOCK_TICK\r\n        })\r\n      }, 1000)\r\n    } else {\r\n      if (timerId) {\r\n        clearInterval(timerId)\r\n      }\r\n    }\r\n  }, [isRunning])\r\n\r\n  const incrementBreakLength = () => {\r\n    dispatch({\r\n      type: INCREMENT_BREAK_LENGTH\r\n    })\r\n  }\r\n\r\n  const decrementBreakLength = () => {\r\n    dispatch({\r\n      type: DECREMENT_BREAK_LENGTH\r\n    })\r\n  }\r\n\r\n  const incrementSessionLength = () => {\r\n    dispatch({\r\n      type: INCREMENT_SESSION_LENGTH\r\n    })\r\n  }\r\n\r\n  const decrementSessionLength = () => {\r\n    dispatch({\r\n      type: DECREMENT_SESSION_LENGTH\r\n    })\r\n  }\r\n\r\n  const startClock = () => {\r\n    dispatch({\r\n      type: START_CLOCK\r\n    })\r\n  }\r\n\r\n  const stopClock = () => {\r\n    dispatch({\r\n      type: STOP_CLOCK\r\n    })\r\n  }\r\n\r\n  const resetClock = () => {\r\n    dispatch({\r\n      type: RESET_CLOCK\r\n    })\r\n  }\r\n\r\n  const stopAlarm = () => {\r\n    dispatch({\r\n      type: STOP_ALARM\r\n    })\r\n  }\r\n\r\n  const actions = {\r\n    incrementBreakLength,\r\n    decrementBreakLength,\r\n    incrementSessionLength,\r\n    decrementSessionLength,\r\n    startClock,\r\n    stopClock,\r\n    resetClock,\r\n    stopAlarm\r\n  }\r\n\r\n  return {\r\n    state,\r\n    actions\r\n  }\r\n}\r\n","export const INCREMENT_BREAK_LENGTH = 'INCREMENT_BREAK_LENGTH'\r\nexport const DECREMENT_BREAK_LENGTH = 'DECREMENT_BREAK_LENGTH'\r\nexport const INCREMENT_SESSION_LENGTH = 'INCREMENT_SESSION_LENGTH'\r\nexport const DECREMENT_SESSION_LENGTH = 'DECREMENT_SESSION_LENGTH'\r\nexport const START_CLOCK = 'START_CLOCK'\r\nexport const STOP_CLOCK = 'STOP_CLOCK'\r\nexport const RESET_CLOCK = 'RESET_CLOCK'\r\nexport const CLOCK_TICK = 'CLOCK_TICK'\r\nexport const STOP_ALARM = 'STOP_ALARM'\r\n","import React from 'react'\r\n\r\ntype MinutesPickerProps = {\r\n  minutes: number\r\n  decrementButtonId: string\r\n  minutesViewerId: string\r\n  incrementButtonId: string\r\n  isActive: boolean\r\n  incrementMinutes: () => void\r\n  decrementMinutes: () => void\r\n}\r\n\r\nconst MinutesPicker: React.FC<MinutesPickerProps> = ({\r\n  minutes,\r\n  decrementButtonId,\r\n  minutesViewerId,\r\n  incrementButtonId,\r\n  isActive,\r\n  incrementMinutes,\r\n  decrementMinutes\r\n}: MinutesPickerProps) => {\r\n  return (\r\n    <div className='bg-gray-700 px-2 py-2 rounded flex justify-center items-center'>\r\n      <button className='bg-white hover:bg-gray-200 text-black font-bold py-2 px-4 rounded text-xl'\r\n        id={decrementButtonId}\r\n        onClick={() => decrementMinutes()}\r\n        disabled={!isActive}>\r\n          -\r\n      </button>\r\n      <span className='px-4 font-bold text-white text-2xl'\r\n        id={minutesViewerId}>\r\n        {minutes}\r\n      </span>\r\n      <button className='bg-white hover:bg-gray-200 text-black font-bold py-2 px-4 rounded text-xl'\r\n        id={incrementButtonId}\r\n        onClick={() => incrementMinutes()}\r\n        disabled={!isActive}>\r\n          +\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MinutesPicker\r\n","import React from 'react'\r\n\r\ntype ClockCountdownProps = {\r\n  intervalName: 'Session' | 'Break'\r\n  initialTime: number\r\n  timeLeft: number\r\n}\r\n\r\nconst ClockCountdown: React.FC<ClockCountdownProps> = ({\r\n  intervalName,\r\n  initialTime,\r\n  timeLeft\r\n}: ClockCountdownProps) => {\r\n  const appendZero = (value: number): string => String(value).length === 1 ? `0${value}` : String(value)\r\n  const formatTime = (time: number): string => {\r\n    const seconds = time % 60\r\n    const minutes = (time - seconds) / 60\r\n\r\n    return `${appendZero(minutes)}:${appendZero(seconds)}`\r\n  }\r\n\r\n  return (\r\n    <div className={`rounded-full bg-${intervalName === 'Session' ? 'red' : 'green'}-400 w-64 h-64 my-8 mx-auto shadow-lg overflow-hidden relative`}>\r\n      <div className='min-w-full min-h-full bg-white absolute left-0'\r\n        style={{ top: `${-100 * (timeLeft / initialTime)}%` }}\r\n      />\r\n      <div className='min-w-full min-h-full flex items-center justify-center relative'>\r\n        <div className='text-gray-800 text-2xl text-center'>\r\n          <span className='font-semibold'\r\n            id='timer-label'>{intervalName}</span>\r\n          <div className='text-5xl font-medium'\r\n            id='time-left'>{formatTime(timeLeft)}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ClockCountdown\r\n","import React, { useEffect, useRef } from 'react'\r\n// @ts-ignore\r\nimport BeepSound from '../assets/BeepSound.wav'\r\nimport EventBus from '../utils/EventBus'\r\n\r\nconst AlarmSound = () => {\r\n  const audioEl = useRef<HTMLAudioElement | null>(null)\r\n  const play = () => {\r\n    const currentAudioEl = audioEl.current\r\n\r\n    if (!currentAudioEl) {\r\n      return\r\n    }\r\n\r\n    currentAudioEl.play()\r\n  }\r\n  const stop = () => {\r\n    const currentAudioEl = audioEl.current\r\n\r\n    if (!currentAudioEl) {\r\n      return\r\n    }\r\n\r\n    currentAudioEl.pause()\r\n    currentAudioEl.currentTime = 0\r\n  }\r\n\r\n  useEffect(() => {\r\n    const removeStartAlarmListener = EventBus.on('startAlarm', play)\r\n    const removeStopAlarmListener = EventBus.on('stopAlarm', stop)\r\n\r\n    return () => {\r\n      removeStartAlarmListener()\r\n      removeStopAlarmListener()\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <audio id='beep'\r\n      ref={audioEl}\r\n      src={BeepSound}\r\n    />\r\n  )\r\n}\r\n\r\nexport default AlarmSound\r\n","import React from 'react'\r\nimport usePomodoroClockState from '../hooks/usePomodoroClockState'\r\nimport MinutesPicker from './MinutesPicker'\r\nimport ClockCountdown from './ClockCountdown'\r\nimport AlarmSound from './AlarmSound'\r\n\r\nconst PomodoroClock = () => {\r\n  const { state, actions } = usePomodoroClockState()\r\n\r\n  return (\r\n    <div className='w-full max-w-2xl rounded overflow-hidden shadow-xl'>\r\n      <div className='px-6 py-4'>\r\n        <div className='font-bold text-3xl text-center mb-4'>Pomodoro clock</div>\r\n        <div className='flex justify-around'>\r\n          <div className='w-40'>\r\n            <div className='text-center text-gray-700 text-xl'\r\n              id='break-label'>\r\n              Break Length\r\n            </div>\r\n            <MinutesPicker\r\n              minutes={state.settings.breakLength}\r\n              decrementButtonId='break-decrement'\r\n              minutesViewerId='break-length'\r\n              incrementButtonId='break-increment'\r\n              isActive={!state.currentIntervalSettings.isRunning}\r\n              incrementMinutes={actions.incrementBreakLength}\r\n              decrementMinutes={actions.decrementBreakLength}\r\n            />\r\n          </div>\r\n          <div className='w-40'>\r\n            <div className='text-center text-gray-700 text-xl'\r\n              id='session-label'>\r\n              Session Length\r\n            </div>\r\n            <MinutesPicker\r\n              minutes={state.settings.sessionLength}\r\n              decrementButtonId='session-decrement'\r\n              minutesViewerId='session-length'\r\n              incrementButtonId='session-increment'\r\n              isActive={!state.currentIntervalSettings.isRunning}\r\n              incrementMinutes={actions.incrementSessionLength}\r\n              decrementMinutes={actions.decrementSessionLength}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <ClockCountdown\r\n          intervalName={state.currentIntervalSettings.name}\r\n          initialTime={state.currentIntervalSettings.initialTime}\r\n          timeLeft={state.currentIntervalSettings.timeLeft}\r\n        />\r\n\r\n        <AlarmSound />\r\n\r\n        <div className='text-center'>\r\n          {state.currentIntervalSettings.isRunning ? (\r\n            <button className='bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded m-2'\r\n              id='start_stop'\r\n              onClick={actions.stopClock}>\r\n                Stop\r\n            </button>\r\n          ) : (\r\n            <button className='bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded m-2'\r\n              id='start_stop'\r\n              onClick={actions.startClock}>\r\n                Start\r\n            </button>\r\n          )\r\n          }\r\n          <button className='bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded m2'\r\n            id='reset'\r\n            onClick={actions.resetClock}>\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PomodoroClock\r\n","import React from 'react'\nimport PomodoroClock from './components/PomodoroClock'\n\nconst App = () => {\n  return (\n    <div className='min-h-screen min-w-full flex items-center justify-center select-none'>\n      <PomodoroClock />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './tailwind.generated.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}